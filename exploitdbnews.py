#Define
__app__     = 'ExploitDBNews'
__author__  = 'Ismail BOZKURT'
__date__    = '2016-07-30'
__license__ = 'MIT'

#imports
import pandas as pd
import requests as rq
from twisted.internet import task
from twisted.internet import reactor

#ExploitDBNews Requeries (Telegram)
BOT_ID = '<TOKEN_ID>'
USER_ID = CHAT_ID = 'USER_ID'

#to be sent format
def bilibo(message): 
	rq.post(url='https://api.telegram.org/bot'+BOT_ID+'/sendMessage',
	data={'chat_id':CHAT_ID, 
		'text': 
"""
<a href="{0}">{1}</a>
<b>Platform: </b><i>{2}</i> 
<b>Type: </b><i>{3}</i>
<b>Author: </b><i>{4}</i>
<b>Date: </b><i>{5}</i>
""".format("https://www.exploit-db.com/exploits/"+str(message[0]), 
           message[2], 
           message[-3], 
           message[-2], 
           message[4], 
           message[3]), 
           'parse_mode':'HTML'}).json()


#get csv-file from offensive-security
url = "https://raw.githubusercontent.com/offensive-security/exploit-database/master/files.csv"


#For do not passed every exploit 
data_new = pd.read_csv(url).as_matrix() 

data_old = pd.read_csv(url).as_matrix()

#loop for each 10 minute 
timeout = 600.0
def execute_it():
    global data_new
    global data_old
    data_new = pd.read_csv(url).as_matrix()
    map(bilibo, [i for i in data_new if set(i) not in (set(j) for j in data_old)])
    data_old = data_new.copy()

l = task.LoopingCall(execute_it)
l.start(timeout) 

reactor.run()
